name: Deploy Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  GO_VERSION: "1.22"
  NODE_VERSION: "18"

jobs:
  deploy-staging:
    runs-on: ubuntu-22.04
    environment: staging
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev  libwebkit2gtk-4.0-dev

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline
          cd ..
          go mod download

      - name: Build frontend
        run: |
          cd frontend
          npm run build
          cd ..

      - name: Verify embedded assets
        run: |
          if [ ! -d "frontend/dist" ]; then
            echo "‚ùå frontend/dist directory not found"
            exit 1
          fi
          echo "‚úÖ frontend/dist directory exists"
          ls -la frontend/dist/

      - name: Run Go linting
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Run tests
        run: |
          go test -v -race ./...

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build staging version
        run: |
          wails build --clean --platform linux/amd64 -tags staging

      - name: Generate version info
        id: version
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT

      - name: Create staging package
        run: |
          mkdir -p staging-release
          cp build/bin/product-management-app staging-release/
          echo "Staging Build" > staging-release/BUILD_INFO.txt
          echo "Commit: ${{ steps.version.outputs.commit_sha }}" >> staging-release/BUILD_INFO.txt
          echo "Date: ${{ steps.version.outputs.build_date }}" >> staging-release/BUILD_INFO.txt
          echo "Branch: develop" >> staging-release/BUILD_INFO.txt

      - name: Upload staging artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-build-${{ steps.version.outputs.commit_sha }}
          path: staging-release/
          retention-days: 14

      - name: Notify on deployment
        if: success()
        run: |
          echo "‚úÖ Staging deployment successful!"
          echo "Build SHA: ${{ steps.version.outputs.commit_sha }}"
          echo "Build Date: ${{ steps.version.outputs.build_date }}"

  smoke-test:
    needs: deploy-staging
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download staging build
        uses: actions/download-artifact@v4
        with:
          pattern: staging-build-*
          path: ./staging-artifacts

      - name: Basic smoke test
        run: |
          # Find the staging binary
          BINARY=$(find staging-artifacts -name "product-management-app" -type f | head -1)

          if [ -n "$BINARY" ] && [ -f "$BINARY" ]; then
            chmod +x "$BINARY"
            echo "‚úÖ Binary found and made executable"
            
            # Check if binary can be executed (basic check)
            if file "$BINARY" | grep -q "executable"; then
              echo "‚úÖ Binary appears to be valid"
            else
              echo "‚ùå Binary validation failed"
              exit 1
            fi
          else
            echo "‚ùå Binary not found"
            exit 1
          fi

      - name: Verify build info
        run: |
          BUILD_INFO=$(find staging-artifacts -name "BUILD_INFO.txt" -type f | head -1)

          if [ -f "$BUILD_INFO" ]; then
            echo "üìã Build Information:"
            cat "$BUILD_INFO"
          else
            echo "‚ö†Ô∏è Build info not found"
          fi
