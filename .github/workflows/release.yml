name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"
      prerelease:
        description: "Is this a pre-release?"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: "1.22"
  NODE_VERSION: "18"

jobs:
  release:
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            os: linux
            arch: amd64
            filename: product-management-app-linux-amd64
          - runner: windows-latest
            os: windows
            arch: amd64
            filename: product-management-app-windows-amd64.exe
          - runner: macos-13
            os: darwin
            arch: amd64
            filename: product-management-app-darwin-amd64
          - runner: macos-13
            os: darwin
            arch: arm64
            filename: product-management-app-darwin-arm64

    runs-on: ${{ matrix.platform.runner }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline

      - name: Install Go dependencies
        run: go mod download

      - name: Verify dependencies
        run: |
          go mod verify
          cd frontend && npm audit --audit-level high

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build Linux
        if: matrix.platform.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev
          wails build --clean --platform linux/amd64 -o ${{ matrix.platform.filename }}
          # Make it executable
          chmod +x build/bin/${{ matrix.platform.filename }}

      - name: Build Windows
        if: matrix.platform.os == 'windows'
        run: |
          wails build --clean --platform windows/amd64 -o ${{ matrix.platform.filename }}

      - name: Build macOS Intel
        if: matrix.platform.os == 'darwin' && matrix.platform.arch == 'amd64'
        run: |
          wails build --clean --platform darwin/amd64
          # List what was created to debug
          ls -la build/bin/
          # Copy the executable from the .app bundle
          cp build/bin/product-management-app.app/Contents/MacOS/product-management-app build/bin/${{ matrix.platform.filename }}
          # Make it executable
          chmod +x build/bin/${{ matrix.platform.filename }}

      - name: Build macOS ARM
        if: matrix.platform.os == 'darwin' && matrix.platform.arch == 'arm64'
        run: |
          wails build --clean --platform darwin/arm64
          # List what was created to debug
          ls -la build/bin/
          # Copy the executable from the .app bundle
          cp build/bin/product-management-app.app/Contents/MacOS/product-management-app build/bin/${{ matrix.platform.filename }}
          # Make it executable
          chmod +x build/bin/${{ matrix.platform.filename }}

      - name: List build output for debugging (Unix)
        if: matrix.platform.os != 'windows'
        run: |
          echo "Contents of build/bin:"
          ls -la build/bin/ || echo "build/bin not found"
          echo "Looking for file: ${{ matrix.platform.filename }}"
          find build/ -name "*${{ matrix.platform.filename }}*" -type f || echo "File not found"

      - name: List build output for debugging (Windows)
        if: matrix.platform.os == 'windows'
        shell: pwsh
        run: |
          Write-Host "Contents of build/bin:"
          if (Test-Path "build/bin/") {
            Get-ChildItem -Path "build/bin/" -Force | Format-Table -AutoSize
          } else {
            Write-Host "build/bin not found"
          }
          Write-Host "Looking for file: ${{ matrix.platform.filename }}"
          if (Test-Path "build/") {
            Get-ChildItem -Path "build/" -Recurse -Filter "*${{ matrix.platform.filename }}*" -ErrorAction SilentlyContinue
          } else {
            Write-Host "build directory not found"
          }

      - name: Verify build output exists (Unix)
        if: matrix.platform.os != 'windows'
        run: |
          if [ ! -f "build/bin/${{ matrix.platform.filename }}" ]; then
            echo "Error: Build file not found: build/bin/${{ matrix.platform.filename }}"
            exit 1
          fi
          echo "Build file verified: build/bin/${{ matrix.platform.filename }}"

      - name: Verify build output exists (Windows)
        if: matrix.platform.os == 'windows'
        shell: pwsh
        run: |
          if (-not (Test-Path "build/bin/${{ matrix.platform.filename }}")) {
            Write-Host "Error: Build file not found: build/bin/${{ matrix.platform.filename }}"
            exit 1
          }
          Write-Host "Build file verified: build/bin/${{ matrix.platform.filename }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.filename }}
          path: build/bin/${{ matrix.platform.filename }}
          if-no-files-found: error

  create-release:
    needs: release
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f -name "*" 2>/dev/null || echo "No artifacts found"
          echo "Directory structure:"
          find ./artifacts -type d 2>/dev/null || echo "No directories found"

      - name: Prepare release files
        run: |
          mkdir -p ./release-files
          # Copy all downloaded artifacts to release-files with better error handling
          if [ -d "./artifacts" ]; then
            find ./artifacts -type f -exec cp {} ./release-files/ \; 2>/dev/null || echo "No files to copy"
          fi
          # List what we're about to release
          echo "Files to be released:"
          ls -la ./release-files/ 2>/dev/null || echo "No release files found"

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          generate_release_notes: true
          body: |
            ## üöÄ Product Management System ${{ steps.get_version.outputs.VERSION }}

            ### üì• Downloads
            Choose the appropriate version for your operating system:

            - **Windows**: `product-management-app-windows-amd64.exe`
            - **macOS (Intel)**: `product-management-app-darwin-amd64`
            - **macOS (Apple Silicon)**: `product-management-app-darwin-arm64`
            - **Linux**: `product-management-app-linux-amd64`

            ### üîß Installation
            1. Download the appropriate file for your OS
            2. Make it executable (Unix systems): `chmod +x product-management-app-*`
            3. Run the application

            ### üìù Release Notes
            Auto-generated release notes will appear below.
          files: ./release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
